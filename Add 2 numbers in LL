Took long time but did it myself . Lengthy af


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        ListNode* curr1 = l1;
        ListNode* curr2 = l2;
        ListNode* head = new ListNode();
        ListNode* curr = head;
        ListNode* prev = head;
        int carry = 0;

        while(curr1!= nullptr && curr2!= nullptr)
        {
            int res = curr1->val + curr2->val + carry;
            int sum = res %10;
            carry = res/10;
            curr->val = sum;
            ListNode* temp = new ListNode();
            curr->next = temp;
            prev = curr;
            curr = curr->next;
            curr1 = curr1->next;
            curr2 = curr2->next;
        }
        while(curr1 != nullptr)
        {
            int res = curr1->val + carry;
            int sum = res %10;
            carry = res/10;
            curr->val = sum;
            ListNode* temp = new ListNode();
            curr->next = temp;
            prev = curr;
            curr = curr->next;
            curr1 = curr1->next;
        }
        while(curr2 != nullptr)
        {
            int res = curr2->val + carry;
            int sum = res %10;
            carry = res/10;
            curr->val = sum;
            ListNode* temp = new ListNode();
            curr->next = temp;
            prev = curr;
            curr = curr->next;
            curr2 = curr2->next;
        }
        if(carry == 1)
        {
            curr->val = 1;
            curr->next = nullptr;
        }
        else
        {
            prev->next = nullptr;
            delete curr;
        };
        return head;
    }
};
