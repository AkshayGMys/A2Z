//Sending parent to avoid uno reverse 
//Creating adjacenecy list
//Marking visited as soon as we enter the dfs

class Solution {
public:
    bool dfs(int node, vector<int> &visited, unordered_map<int, vector<int>>& adjacencyList, int parent)
    {
        visited[node] = 1;

        for (auto it : adjacencyList[node]) {
            if (it == parent)
                continue; // skip the edge we came from
            else if (!visited[it]) {
                if (dfs(it, visited, adjacencyList, node))
                    return true;
            } 
            else {
                // visited and not parent => cycle
                return true;
            }
        }

        return false;
    }

    bool isCycle(int V, vector<vector<int>>& edges) 
    {
        vector<int> visited(V, 0);
        unordered_map<int, vector<int>> adjacencyList;

        // build adjacency list
        for (auto& it : edges) {
            adjacencyList[it[0]].push_back(it[1]);
            adjacencyList[it[1]].push_back(it[0]);
        }

        // check each component
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, visited, adjacencyList, -1))
                    return true;
            }
        }

        return false;
    }
};
