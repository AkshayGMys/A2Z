Keeping a min heap of size k+1 ensures that the element is sorted , do this 

class Solution {
  public:
    void nearlySorted(vector<int>& arr, int k) 
    {
        priority_queue<int, vector<int>, greater<int>> pq;
        
        //Push the first k elements to the queue
        for(int i = 0;i < k+1 ;i++)
            pq.push(arr[i]);
        //This is to maintain the insertion 
        int index = 0;
        
        for(int i = k+1 ; i< arr.size();i++)
        {
            arr[index++] = pq.top();
            pq.pop();
            pq.push(arr[i]);
        }
        
        while(!pq.empty())
        {
            arr[index++] = pq.top();
            pq.pop();
        }
    }
};
