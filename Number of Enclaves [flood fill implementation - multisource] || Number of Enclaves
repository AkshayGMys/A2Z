I implemented dfs from every cell initially ,which was wrong and took a lot of time 
The core concept is from the land that is in the border , we do the depth from that very index and mark all the nodes as visited == 1. 


class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));

        // DFS from boundary land cells
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 || j == 0 || i == m - 1 || j == n - 1) &&
                    grid[i][j] == 1 && !visited[i][j]) {
                    dfs(i, j, grid, visited, m, n);
                }
            }
        }

        // Count all unvisited land cells (enclaves)
        int result = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j])
                    result++;
            }
        }
        return result;
    }

    void dfs(int i, int j, vector<vector<int>>& grid,
             vector<vector<int>>& visited, int m, int n)
    {
        visited[i][j] = 1;
        int dRow[] = {-1, 0, 1, 0};
        int dCol[] = {0, 1, 0, -1};

        for (int k = 0; k < 4; k++) {
            int row = i + dRow[k];
            int col = j + dCol[k];
            if (row >= 0 && row < m && col >= 0 && col < n &&
                grid[row][col] == 1 && !visited[row][col]) {
                dfs(row, col, grid, visited, m, n);
            }
        }
    }
};
