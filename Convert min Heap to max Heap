1) For a node to be a parent , 2*i+2 should be less than n;
that is floor(n-2 /2) is the the last element with a child , that is (n-1)/2 in integer division 

2) Heapify works bottom-up:
Start at last non-leaf (n/2 - 1),
Move backward to root (0),
Ensures when you fix a parent, its children are already heaps.

3)The heapify follows bottoms up approad .DO NOT FORGET TO RECURSIVELY HEAPIFY IF YOU SWAP 

// User function Template for C++

class Solution {
  public:
    void convertMinToMaxHeap(vector<int> &arr, int n) {
        for(int i = (n-1)/2 ; i>=0;i--)
        {
            heapify(arr , n , i);
        }
    }
    void heapify(vector<int> &arr , int size , int i)
    {
        int iLargest = i;
        if(2*i+1 < size && arr[2*i+1] > arr[iLargest] )
            iLargest = 2*i+1;
        if(2*i+2 < size && arr[2*i+2] > arr[iLargest])
                iLargest = 2*i+2;
        if(iLargest != i)
        {
            swap(arr[i] , arr[iLargest]);
            heapify(arr , size , iLargest);
        }
    }
};
