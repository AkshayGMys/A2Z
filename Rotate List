//Ulta socho , dont rotate from back to front , send from front to back (length of linked list - k ) times.
I implemented on my own

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) 
    {
        if(head == nullptr)
            return nullptr;
        if(head->next == nullptr)
            return head;
        ListNode* tail = head;
        int len =1;
        while(tail->next != nullptr)
        {
            tail = tail->next;
            len++;
        }
        k = k%len;
        for(int i=1;i<=len-k;i++)
        {
            ListNode* node = head;
            head = head->next;
            tail->next = node;
            node->next = nullptr;
            tail = tail->next;
        }
        return head;
    }
};
