//This uses Kahn algorithm that is Breadth first search with an indegree unordered map .This is fairly simple if you watch the video 
//I did it myself

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        queue<int> q;
        unordered_map<int,int> inDegree;
        vector<vector<int>> adjacencyList(numCourses);
        vector<int> result;
        for(auto it:prerequisites)
        {
            inDegree[it[0]]++; 
            adjacencyList[it[1]].push_back(it[0]);
        }
        for(int i =0;i<numCourses;i++)
        {
            if(inDegree[i] == 0)
            {
                q.push(i);
            }        
        }
        while(!q.empty())
        {
            int curr = q.front();
            result.push_back(curr);
            q.pop();
            for(auto it:adjacencyList[curr])
            {
                inDegree[it]--;
                if(inDegree[it] == 0)
                {   
                    q.push(it);
                }
            }   
        }
        if(result.size() == numCourses) return result;
        else return {};
    }
};
